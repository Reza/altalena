Simple built-in streamer

== `:new(...)` ==
_ctor_
creates streamer object

== `:allocate(...)` ==

|| *named parameter* || *description* ||
|| dest || destination ||
|| timeout || client side timeout ||
|| sdp || sdp string to offer (may be used insted of offer/type)||
|| rcv|| type of receiving device (see table below for possible values)||
|| snd|| type of device generating audio stream (see table below for possible values)||

|| *sending device id* || *description* || 
|| SND_DEVICE_TYPE_FILE || file || 
|| SND_DEVICE_TYPE_SND_CARD_MIC || default line-in || 


|| *receiving device id* || *description* || 
|| RCV_DEVICE_NONE || none || 
|| RCV_DEVICE_FILE_REC_ID || wav file || 
|| RCV_DEVICE_WINSND_WRITE || default output ||


== `:play(...)` ==

WAV file MUST be in the same sampling rate (PCM) as RTP stream. In case of error you might see the following log line


 clock rates of payload and wav file are different pt:8000 file:44100 imsh:7000000


|| *named parameter* || *description* ||
|| file || flename to play (if open with SND_DEVICE_TYPE_FILE)||
|| loop || the file will be played in loop||
|| sync || if true the function will exit upon eof (cannot be used with loop = true||

*relative filepaths are taken from "m2ims/sounds_dir" configura
tion value.

== `:stop()` ==

stops playing the file

== `:remoteoffer()` ==

returns raw remote offer 

== `:localoffer()` ==

returns raw local offer 

== `:modify(...)` ==

|| *named parameter* || *description* ||
|| sdp || remote offer (modifies destination of the streaming)||

===example 1===
Makes call to the destination, the INVITE sent is empty the call should be answered lately. 

{{{
s = streamer:new();
s:allocate{rcv=iw.RCV_DEVICE_NONE, snd=iw.SND_DEVICE_TYPE_FILE}

caller = sipcall:new();
caller:makecall{dest="sip:24001@10.0.0.1:5062", timeout=60,sdp=s:localoffer()}


s:modify{sdp=caller:remoteoffer()}
s:play{file="C:\\tada.wav", loop=true}

}}}