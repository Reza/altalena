<wiki:toc max_depth="3" />

Encapsulates SIP call functionality

== `:new(...)` ==
_ctor_
creates sipcall object

== `:makecall(...)` ==

|| *named parameter* || *description* ||
|| dest || destination ||
|| timeout || client side timeout ||
|| sdp || sdp string to offer (may be used instead of offer/type)||
|| offer || offer ||
|| type || type type ||
|| H_XXX || XXX header will be added to the SIP message ||

===example 1 - Make call (empty INVITE) ===
Makes call to the destination, the INVITE sent is empty the call should be answered lately. 

{{{
local caller = sipcall:new()
caller:makecall{dest="sip:24001@192.168.150.3", timeout=15}

localoffer = [[v=0
o=alice 2890844526 2890844526 IN IP4 host.ivrworx.com
s=
c=IN IP4 192.168.150.3
t=0 0
m=audio 49170 RTP/AVP 0
a=rtpmap:0 PCMU/8000

]]

caller:answer{sdp=localoffer}

}}}


===example 2 - B2B proxy===
{{{
local leg1 = sipcall:new()
local leg2 = sipcall:new()

leg1:makecall{dest="sip:24001@192.168.150.3", timeout=15}
leg2:makecall{dest="sip:6095@192.168.150.3", sdp=leg1:remoteoffer(), timeout=15}

leg1:answer{sdp=leg2:remoteoffer()}

}}}

== `:remoteoffer()` ==

returns raw remote offer 

== `:localoffer()` ==

returns raw local offer 

== `:waitfordtmf(...)` ==

|| *named parameter* || *description* ||
|| timeout || timeout to wait for next DTMF signal ||


== `:gatherdigits(...)` ==

wrapper method 
|| *named parameter* || *description* ||
|| timeout || timeout to wait for next DTMF signal ||
|| pattern || lua pattern to match for all gathered digits ||

=== example 1 - Gathering digits===
{{{
local caller = sipcall:new()


localoffer = [[v=0
o=ivrworx 123456 654321 IN IP4 10.0.0.1
s=A conversation
c=IN IP4 10.0.0.1
t=0 0
m=audio 6000 RTP/AVP 0 8 101
a=rtpmap:0 PCMU/8000/1
a=rtpmap:8 PCMA/8000/1
a=rtpmap:101 telephone-event/8000/1
a=fmtp:101 0-11

]]


caller:makecall{dest="sip:24001@192.168.150.144", timeout=15, sdp=localoffer}
res, dtmf = caller:gatherdigits{pattern="%d#", timeout=15}
l:loginfo(res.."=res".."signal="..dtmf)
}}}

== `:cleandtmfbuffer(...)` ==

cleans dtmf buffer 

== `:ani(...)` ==

return ANI of the call (user part of From: header)

== `:dnis(...)` ==

return DNIS of the call (user part of To: header)

== `:hangup(...)` ==

Hangs up the call

== `:waitforhangup(...)` ==

Waits for remote party to hang

== `:blindxfer(...)` ==
Xfers the call (REFER)
|| *named parameter* || *description* ||
|| dest || xfer destination ||

=== example 1 - Blind xfer===
{{{
local caller = sipcall:new()


localoffer = [[v=0
o=ivrworx 123456 654321 IN IP4 10.0.0.1
s=A conversation
c=IN IP4 10.0.0.1
t=0 0
m=audio 6000 RTP/AVP 0 8 101
a=rtpmap:0 PCMU/8000/1
a=rtpmap:8 PCMA/8000/1
a=rtpmap:101 telephone-event/8000/1
a=fmtp:101 0-11

]]


caller:makecall{dest="sip:24001@192.168.150.142", timeout=15, sdp=localoffer}
caller:blindxfer{dest="sip:24001@192.168.150.144"}
}}}

== `:sendinfo(...)` ==
sends INFO 
|| *named parameter* || *description* ||
|| offer|| body of INFO ||
|| type || type of body INFO ||
|| async || if true waits and returns response ||

== `:accept(...)` ==
accepts incoming SIP call

|| *named parameter* || *description* ||
|| service || stack identifier ||
|| timeout || time to waitin for incoming call ||

=== example : Accepting the call ===

{{{
local caller  = sipcall:new()



localoffer = [[v=0
o=ivrworx 123456 654321 IN IP4 10.0.0.1
s=A conversation
c=IN IP4 10.0.0.1
t=0 0
m=audio 6000 RTP/AVP 0 8 101
a=rtpmap:0 PCMU/8000/1
a=rtpmap:8 PCMA/8000/1
a=rtpmap:101 telephone-event/8000/1
a=fmtp:101 0-11

]]


caller:accept{service="sip,resip", timeout=600}
caller:answer{sdp=localoffer} 
}}}

== `:startregister(...)` ==

starts registration

|| *named parameter* || *description* ||
|| registrar|| registrar URI and To: example "sip:1234@example.com"||
|| timeout || client side timeout ||
|| username|| user name||
|| password || password ||
|| realm || realm  ||

== `:unregister(...)` ==

stops registration