<wiki:toc max_depth="3" />

Encapsulates SIP call functionality

== `:new(...)` ==
_ctor_
creates sipcall object

== `:makecall(...)` ==

|| *named parameter* || *description* ||
|| dest || destination ||
|| timeout || client side timeout ||
|| sdp || sdp string to offer (may be used instead of offer/type)||
|| remoteoffer || raw remote offer ||
|| localoffer || raw local offer ||
|| type || type ||
|| H_XXX || XXX header will be added to the SIP message ||

===example 1===
Makes call to the destination, the INVITE sent is empty the call should be answered lately. 

{{{
local caller = sipcall:new()
caller:makecall{dest="sip:24001@192.168.150.3", timeout=15}

localoffer = [[v=0
o=alice 2890844526 2890844526 IN IP4 host.ivrworx.com
s=
c=IN IP4 192.168.150.3
t=0 0
m=audio 49170 RTP/AVP 0
a=rtpmap:0 PCMU/8000

]]

caller:answer{sdp=localoffer}

}}}


===example 2 B2B proxy===
{{{
local leg1 = sipcall:new()
local leg2 = sipcall:new()

leg1:makecall{dest="sip:24001@192.168.150.3", timeout=15}
leg2:makecall{dest="sip:6095@192.168.150.3", sdp=leg1:remoteoffer(), timeout=15}

leg1:answer{sdp=leg2:remoteoffer()}

}}}

== `:waitfordtmf(...)` ==

|| *named parameter* || *description* ||
|| timeout || timeout to wait for next DTMF signal ||


== `:gatherdigits(...)` ==

wrapper method 
|| *named parameter* || *description* ||
|| timeout || timeout to wait for next DTMF signal ||
|| pattern || lua pattern to match for all gathered digits ||

=== example 1 gathering digits===
{{{
local caller = sipcall:new()


localoffer = [[v=0
o=ivrworx 123456 654321 IN IP4 10.0.0.1
s=A conversation
c=IN IP4 10.0.0.1
t=0 0
m=audio 6000 RTP/AVP 0 8 101
a=rtpmap:0 PCMU/8000/1
a=rtpmap:8 PCMA/8000/1
a=rtpmap:101 telephone-event/8000/1
a=fmtp:101 0-11

]]


caller:makecall{dest="sip:24001@192.168.150.144", timeout=15, sdp=localoffer}
res, dtmf = caller:gatherdigits{pattern="%d#", timeout=15}
l:loginfo(res.."=res".."signal="..dtmf)
}}}

== `:cleandtmfbuffer(...)` ==

cleans dtmf buffer 

== `:ani(...)` ==

return ANI of the call (user part of From: header)

== `:dnis(...)` ==

return DNIS of the call (user part of To: header)

== `:hangup(...)` ==

Hangs up the call

== `:waitforhangup(...)` ==

Waits for remote party to hang